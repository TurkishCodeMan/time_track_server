# Generated by Django 5.1 on 2025-01-16 18:11

import api.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Machine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Machine',
                'verbose_name_plural': 'Machines',
                'db_table': 'machines',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('ADMIN', 'Admin'), ('ENGINEER', 'Engineer'), ('WORKER', 'Worker')], default='WORKER', max_length=20)),
                ('name', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(2)])),
                ('surname', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(2)])),
                ('email', models.EmailField(max_length=254, unique=True, validators=[django.core.validators.EmailValidator()])),
                ('username', models.CharField(blank=True, max_length=150, null=True, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
            },
            managers=[
                ('objects', api.models.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('LOGIN', 'Login'), ('LOGOUT', 'Logout'), ('ROLE_CHANGE', 'Role Change'), ('MACHINE_ASSIGNMENT', 'Machine Assignment'), ('MACHINE_UNASSIGNMENT', 'Machine Unassignment'), ('WORKER_REMOVAL', 'Worker Removal')], max_length=50)),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('action_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='actions_performed', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Log',
                'verbose_name_plural': 'User Logs',
                'db_table': 'user_logs',
            },
        ),
        migrations.CreateModel(
            name='MachineLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.DecimalField(decimal_places=8, help_text='Enlem bilgisi', max_digits=10)),
                ('longitude', models.DecimalField(decimal_places=8, help_text='Boylam bilgisi', max_digits=11)),
                ('heading', models.DecimalField(blank=True, decimal_places=2, help_text='Yön bilgisi (derece)', max_digits=5, null=True)),
                ('accuracy', models.DecimalField(blank=True, decimal_places=2, help_text='Konum doğruluk değeri (metre)', max_digits=10, null=True)),
                ('timestamp', models.DateTimeField(help_text='Konum bilgisinin alındığı zaman')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Kaydın oluşturulma zamanı')),
                ('machine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='locations', to='api.machine')),
            ],
            options={
                'verbose_name': 'Machine Location',
                'verbose_name_plural': 'Machine Locations',
                'db_table': 'machine_locations',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['machine', '-timestamp'], name='machine_loc_machine_0ac1ae_idx'), models.Index(fields=['timestamp'], name='machine_loc_timesta_71db15_idx')],
            },
        ),
        migrations.CreateModel(
            name='WorkerMachine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('assigned_by', models.ForeignKey(limit_choices_to={'role__in': ['ADMIN', 'ENGINEER']}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='machine_assignments_made', to=settings.AUTH_USER_MODEL)),
                ('machine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='worker_assignments', to='api.machine')),
                ('worker', models.ForeignKey(limit_choices_to={'role': 'WORKER'}, on_delete=django.db.models.deletion.CASCADE, related_name='machine_assignments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Worker Machine Assignment',
                'verbose_name_plural': 'Worker Machine Assignments',
                'db_table': 'worker_machines',
                'constraints': [models.UniqueConstraint(condition=models.Q(('is_active', True)), fields=('worker', 'machine'), name='unique_active_worker_machine')],
            },
        ),
    ]
